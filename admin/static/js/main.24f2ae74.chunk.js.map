{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ipValidate","ip","isMask","result","matches","match","slice","map","el","parseInt","includes","toString","App","GenericApp","constructor","props","extendedProps","translations","en","require","de","ru","pt","nl","fr","it","es","pl","doNotLoadAllObjects","adapterName","super","setInterfaceParam","index","param","value","interfaces","JSON","parse","stringify","this","state","interfacesChanged","setState","setDns","interfaceIndex","dnsIndex","dns","addDns","push","removeDns","splice","sendData","password","socket","sendTo","instance","rootPassword","data","then","enqueueSnackbar","I18n","t","variant","refresh","window","location","hostname","ip4","href","port","connect","ssid","error","disconnect","wifi","wifiConnections","sudoDialog","sudoDialogPassword","wifiDialog","wifiDialogPassword","onConnectionReady","setInterval","length","sort","item1","item2","mac","type","virtual","filter","interfaceItem","dhcp","getSelectedTab","selectedTab","renderRootDialog","Dialog","open","onClose","DialogTitle","DialogContent","TextField","onChange","e","target","DialogActions","Button","onClick","color","renderWifiDialog","renderInterface","i","buttonDisabled","ip4subnet","Grid","container","item","FormControlLabel","control","Checkbox","checked","label","disabled","gateway","ip6","ip6subnet","dnsRecord","dnsI","IconButton","renderWifi","connected","undefined","security","render","loaded","theme","className","style","background","themeType","Container","AppBar","position","Tabs","selectTab","Tab","classes","tabContainer","iface","isIFrame","tabContentIFrame","tabContent","withSnackbar","withStyles","root","padding","overflow","display","Boolean","themeName","Utils","getThemeName","console","log","version","build","ReactDOM","common","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24f2ae74.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\nimport SettingsInputComponentIcon from '@material-ui/icons/SettingsInputComponent';\r\nimport WifiIcon from '@material-ui/icons/Wifi';\r\nimport SignalWifi4BarIcon from '@material-ui/icons/SignalWifi4Bar';\r\nimport SignalWifi4BarLockIcon from '@material-ui/icons/SignalWifi4BarLock';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {\r\n    Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, TextField, FormControlLabel, Grid, Container, IconButton,\r\n} from '@material-ui/core';\r\nimport { withSnackbar } from 'notistack';\r\n\r\nconst styles = () => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        overflow: 'auto',\r\n    },\r\n    tabContentIFrame: {\r\n        padding: 10,\r\n        overflow: 'auto',\r\n    },\r\n    tabContainer: {\r\n        display: 'flex',\r\n    },\r\n});\r\n\r\nconst ipValidate = (ip, isMask) => {\r\n    let result;\r\n    const matches = ip.match(/^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)$/);\r\n    if (!matches) {\r\n        result = false;\r\n    } else {\r\n        result = !matches.slice(1).map(el => parseInt(el) >= 0 && parseInt(el) <= 255).includes(false);\r\n\r\n        if (isMask && result) {\r\n            result = (parseInt(matches[1]) * 256 ** 3 + parseInt(matches[2]) * 256 ** 2 + parseInt(matches[3]) * 256 + parseInt(matches[4])).toString(2).match(/^1+0+$/);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {};\r\n        extendedProps.translations = {\r\n            en: require('./i18n/en'),\r\n            de: require('./i18n/de'),\r\n            ru: require('./i18n/ru'),\r\n            pt: require('./i18n/pt'),\r\n            nl: require('./i18n/nl'),\r\n            fr: require('./i18n/fr'),\r\n            it: require('./i18n/it'),\r\n            es: require('./i18n/es'),\r\n            pl: require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n        extendedProps.doNotLoadAllObjects = true;\r\n        extendedProps.adapterName = 'network';\r\n\r\n        super(props, extendedProps);\r\n\r\n        this.state = {\r\n            interfaces: [],\r\n            interfacesChanged: [],\r\n            wifi: [],\r\n            dns: [],\r\n            wifiConnections: [],\r\n            sudoDialog: false,\r\n            sudoDialogPassword: '',\r\n            wifiDialog: false,\r\n            wifiDialogPassword: '',\r\n        };\r\n    }\r\n\r\n    onConnectionReady() {\r\n        this.refresh();\r\n\r\n        setInterval(() => {\r\n            this.socket.sendTo('network.' + this.instance, 'wifi', null)\r\n                .then(wifi => {\r\n                    wifi.length && this.setState({ wifi });\r\n                    return this.socket.sendTo('network.' + this.instance, 'wifiConnections', null);\r\n                })\r\n                .then(wifiConnections => this.setState({ wifiConnections }));\r\n        }, 4000);\r\n    }\r\n\r\n    refresh() {\r\n        this.socket.sendTo('network.' + this.instance, 'interfaces', null)\r\n            .then(interfaces => {\r\n                interfaces.sort((item1, item2) => item1.mac > item2.mac ? -1 : 1);\r\n                interfaces.sort((item1, item2) => item1.type === 'wired' ? -1 : 1);\r\n                interfaces.sort((item1, item2) => !item1.virtual ? -1 : 1);\r\n                interfaces = interfaces.filter(interfaceItem => interfaceItem.ip4 !== '127.0.0.1');\r\n                interfaces = interfaces.map(interfaceItem => {\r\n                    if (typeof interfaceItem.dhcp === 'string') {\r\n                        interfaceItem.dhcp = JSON.parse(interfaceItem.dhcp);\r\n                    }\r\n\r\n                    return interfaceItem;\r\n                });\r\n\r\n                this.setState({ interfaces, interfacesChanged: JSON.parse(JSON.stringify(interfaces)) });\r\n\r\n                return this.socket.sendTo('network.' + this.instance, 'wifi', null);\r\n            })\r\n            .then(wifi => {\r\n                this.setState({ wifi });\r\n                return this.socket.sendTo('network.' + this.instance, 'dns', null);\r\n            })\r\n            .then(dns => {\r\n                this.setState({ dns });\r\n                return this.socket.sendTo('network.' + this.instance, 'wifiConnections', null);\r\n            })\r\n            .then(wifiConnections => this.setState({ wifiConnections }));\r\n    }\r\n\r\n    setInterfaceParam = (index, param, value) => {\r\n        const interfaces = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfaces[index][param] = value;\r\n        this.setState({ interfacesChanged: interfaces });\r\n    }\r\n\r\n    setDns = (interfaceIndex, dnsIndex, value) => {\r\n        const interfacesChanged = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfacesChanged[interfaceIndex].dns[dnsIndex] = value;\r\n        this.setState({ interfacesChanged });\r\n    }\r\n\r\n    addDns = interfaceIndex => {\r\n        const interfacesChanged = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfacesChanged[interfaceIndex].dns.push('');\r\n        this.setState({ interfacesChanged });\r\n    }\r\n\r\n    removeDns = (interfaceIndex, dnsIndex) => {\r\n        const interfacesChanged = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfacesChanged[interfaceIndex].dns.splice(dnsIndex, 1);\r\n        this.setState({ interfacesChanged });\r\n    }\r\n\r\n    getSelectedTab() {\r\n        return this.state.selectedTab ? this.state.selectedTab : 0;\r\n    }\r\n\r\n    sendData = (index, password) => {\r\n        this.socket.sendTo('network.' + this.instance, 'changeInterface', {\r\n            rootPassword: password,\r\n            data: this.state.interfacesChanged[index],\r\n        })\r\n            .then(result => {\r\n                if (result) {\r\n                    this.props.enqueueSnackbar(I18n.t('Interface updated'), { variant: 'success' });\r\n                    this.refresh();\r\n                } else {\r\n                    this.props.enqueueSnackbar(I18n.t('Interface not updated'), { variant: 'error' });\r\n                }\r\n            });\r\n\r\n        if (window.location.hostname === this.state.interfaces[index].ip4 && this.state.interfacesChanged[index].ip4 !== this.state.interfaces[index].ip4) {\r\n            window.location.href = `http://${this.state.interfacesChanged[index].ip4}:${window.location.port}`;\r\n        }\r\n    }\r\n\r\n    connect = (ssid, password) => {\r\n        this.socket.sendTo('network.' + this.instance, 'wifiConnect', { ssid, password })\r\n            .then(result => {\r\n                if (result.result) {\r\n                    this.props.enqueueSnackbar(`${ssid} ${I18n.t('connected')}`, { variant: 'success' });\r\n                    this.refresh();\r\n                } else {\r\n                    this.props.enqueueSnackbar(JSON.stringify(result.error), { variant: 'error' });\r\n                }\r\n            });\r\n    }\r\n\r\n    disconnect = () => {\r\n        this.socket.sendTo('network.' + this.instance, 'wifiDisconnect', null)\r\n            .then(result => {\r\n                if (result.result) {\r\n                    this.props.enqueueSnackbar(I18n.t('Wi-fi disconnected'), { variant: 'success' });\r\n                    this.refresh();\r\n                } else {\r\n                    this.props.enqueueSnackbar(JSON.stringify(result.error), { variant: 'error' });\r\n                }\r\n            });\r\n    }\r\n\r\n    renderRootDialog() {\r\n        return <Dialog\r\n            open={this.state.sudoDialog !== false}\r\n            onClose={() => this.setState({\r\n                sudoDialog: false,\r\n                sudoDialogPassword: '',\r\n            })}\r\n        >\r\n            <DialogTitle>{I18n.t('Enter sudo password')}</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    value={this.state.sudoDialogPassword}\r\n                    onChange={e => this.setState({ sudoDialogPassword: e.target.value })}\r\n                    type=\"password\"\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => this.setState({\r\n                        sudoDialog: false,\r\n                        sudoDialogPassword: '',\r\n                    })}\r\n                >\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                        this.sendData(this.state.sudoDialog, this.state.sudoDialogPassword);\r\n                        this.setState({\r\n                            sudoDialog: false,\r\n                            sudoDialogPassword: '',\r\n                        });\r\n                    }}\r\n                >\r\n                    {I18n.t('Send')}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    renderWifiDialog() {\r\n        return <Dialog\r\n            open={this.state.wifiDialog !== false}\r\n            onClose={() => this.setState({\r\n                wifiDialog: false,\r\n                wifiDialogPassword: '',\r\n            })}\r\n        >\r\n            <DialogTitle>{I18n.t('Enter wifi password')}</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    value={this.state.wifiDialogPassword}\r\n                    onChange={e => this.setState({ wifiDialogPassword: e.target.value })}\r\n                    type=\"password\"\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => this.setState({\r\n                        wifiDialog: false,\r\n                        wifiDialogPassword: '',\r\n                    })}\r\n                >\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                        this.connect(this.state.wifiDialog, this.state.wifiDialogPassword);\r\n                        this.setState({\r\n                            wifiDialog: false,\r\n                            wifiDialogPassword: '',\r\n                        });\r\n                    }}\r\n                >\r\n                    {I18n.t('Send')}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    renderInterface(interfaceItem, i) {\r\n        let buttonDisabled = false;\r\n\r\n        if (!interfaceItem.dhcp) {\r\n            buttonDisabled = !ipValidate(interfaceItem.ip4) || !ipValidate(interfaceItem.ip4subnet, true);\r\n        }\r\n\r\n        return <>\r\n            <Grid container>\r\n                <Grid item>\r\n                    <div>\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                checked={interfaceItem.dhcp}\r\n                                onChange={e => this.setInterfaceParam(i, 'dhcp', e.target.checked)}\r\n                            />}\r\n                            label={I18n.t('DHCP')}\r\n                        />\r\n                    </div>\r\n                    <>\r\n                        <h4>IPv4</h4>\r\n                        <div>\r\n                            <TextField\r\n                                value={interfaceItem.ip4}\r\n                                label={I18n.t('IPv4')}\r\n                                onChange={e => this.setInterfaceParam(i, 'ip4', e.target.value)}\r\n                                disabled={interfaceItem.dhcp}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <TextField\r\n                                value={interfaceItem.ip4subnet}\r\n                                label={I18n.t('IPv4 netmask')}\r\n                                onChange={e => this.setInterfaceParam(i, 'ip4subnet', e.target.value)}\r\n                                disabled={interfaceItem.dhcp}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <TextField\r\n                                value={interfaceItem.gateway}\r\n                                label={I18n.t('Gateway')}\r\n                                onChange={e => this.setInterfaceParam(i, 'gateway', e.target.value)}\r\n                                disabled={interfaceItem.dhcp}\r\n                            />\r\n                        </div>\r\n                        <h4>IPv6</h4>\r\n                        <div>\r\n                            <TextField\r\n                                value={interfaceItem.ip6}\r\n                                label={I18n.t('IPv6')}\r\n                                onChange={e => this.setInterfaceParam(i, 'ip6', e.target.value)}\r\n                                disabled={interfaceItem.dhcp}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <TextField\r\n                                value={interfaceItem.ip6subnet}\r\n                                label={I18n.t('IPv6 netmask')}\r\n                                onChange={e => this.setInterfaceParam(i, 'ip6subnet', e.target.value)}\r\n                                disabled={interfaceItem.dhcp}\r\n                            />\r\n                        </div>\r\n                        <h4>DNS</h4>\r\n                    </>\r\n                    {\r\n                        interfaceItem.dns && interfaceItem.dns.map((dnsRecord, dnsI) => <div key={dnsI}>\r\n                            <TextField\r\n                                value={dnsRecord}\r\n                                label={I18n.t('DNS record')}\r\n                                onChange={e => this.setDns(i, dnsI, e.target.value)}\r\n                            />\r\n                            {interfaceItem.dns && interfaceItem.dns.length > 1 ? <IconButton onClick={() => this.removeDns(i, dnsI)}>\r\n                                <DeleteIcon />\r\n                            </IconButton> : null}\r\n                        </div>)\r\n                    }\r\n                    <div>\r\n                        <IconButton onClick={() => this.addDns(i)}>\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                    <div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={buttonDisabled}\r\n                            onClick={() => this.sendData(i, '')}\r\n                        >\r\n                            {I18n.t('Save')}\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n                {interfaceItem.type === 'wired'\r\n                    ? null\r\n                    : <Grid item>{this.renderWifi()}</Grid>}\r\n            </Grid>\r\n            <pre>\r\n                {/* {interfaceItem.type === 'wireless'\r\n                    ? JSON.stringify(this.state.wifi, null, 2) + JSON.stringify(this.state.wifiConnections, null, 2)\r\n                    : null} */}\r\n                {/* {JSON.stringify(interfaceItem, null, 2)} */}\r\n            </pre>\r\n        </>;\r\n    }\r\n\r\n    renderWifi() {\r\n        return this.state.wifi.map((wifi, i) => {\r\n            const connected = this.state.wifiConnections.length && wifi.ssid === this.state.wifiConnections[0].ssid;\r\n            return <div key={i}>\r\n                <Button\r\n                    variant={connected ? 'contained' : undefined}\r\n                    color={connected ? 'primary' : undefined}\r\n                    disabled={connected}\r\n                    onClick={() => {\r\n                        if (wifi.security.includes('Open')) {\r\n                            this.connect(wifi.ssid, '');\r\n                        } else {\r\n                            this.setState({wifiDialog: wifi.ssid});\r\n                        }\r\n                    }}\r\n                >\r\n                    {wifi.security.includes('Open')\r\n                        ? <SignalWifi4BarIcon />\r\n                        : <SignalWifi4BarLockIcon />}\r\n                    {wifi.ssid}\r\n                </Button>\r\n                {' '}\r\n                {connected\r\n                    ? <>\r\n                        <Button onClick={this.disconnect}>{I18n.t('Disconnect')}</Button>\r\n                    </>\r\n                    : ''}\r\n            </div>;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded || !this.state.interfaces.length) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType} />\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <div className=\"App\" style={{ background: this.state.themeType === 'dark' ? '#000' : '#FFF' }}>\r\n                <Container>\r\n                    <AppBar position=\"static\">\r\n                        <Tabs value={this.getSelectedTab()} onChange={(e, index) => this.selectTab(index, index)} variant=\"scrollable\">\r\n                            {this.state.interfaces.map((interfaceItem, i) => <Tab\r\n                                key={i}\r\n                                label={<div className={this.props.classes.tabContainer}>\r\n                                    {interfaceItem.type === 'wired' ? <SettingsInputComponentIcon /> : <WifiIcon />}\r\n                                    {interfaceItem.iface}\r\n                                </div>}\r\n                            />)}\r\n                        </Tabs>\r\n                    </AppBar>\r\n\r\n                    <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\r\n\r\n                        {this.renderInterface(this.state.interfacesChanged[this.getSelectedTab()], this.getSelectedTab())}\r\n\r\n                    </div>\r\n                    {this.renderRootDialog()}\r\n                    {this.renderWifiDialog()}\r\n                </Container>\r\n            </div>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withSnackbar(withStyles(styles)(App));\r\n","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker === null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404\r\n        || (contentType !== null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { SnackbarProvider } from 'notistack';\r\nimport './index.css';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { version } from '../package.json';\r\n\r\nwindow.adapterName = 'network';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <SnackbarProvider>\r\n                <App\r\n                    common={{}}\r\n                    onThemeChange={_theme => {\r\n                        themeName = _theme;\r\n                        build();\r\n                    }}\r\n                />\r\n            </SnackbarProvider>\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root'),\r\n    );\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}