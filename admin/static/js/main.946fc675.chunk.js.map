{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ipValidate","ip","isMask","result","matches","match","slice","find","el","parseInt","toString","getWiFiIcon","open","quality","style","marginRight","App","GenericApp","constructor","props","extendedProps","translations","en","require","de","ru","pt","nl","fr","it","es","pl","doNotLoadAllObjects","adapterName","super","refreshWiFi","wifiConnectionsLocal","this","socket","sendTo","instance","then","wifiConnections","setState","wifi","length","filter","wifiNetwork","ssid","trim","sort","a","b","connectedA","connectedB","setInterfaceParam","index","param","value","interfacesChanged","JSON","parse","stringify","state","setDns","interfaceIndex","dnsIndex","dns","addDns","push","removeDns","splice","sendData","password","processing","rootPassword","data","enqueueSnackbar","I18n","t","variant","refresh","window","location","hostname","interfaces","ip4","href","port","connect","iface","getSelectedTab","startTime","Date","now","pendingWifiInterval","setInterval","clearInterval","disconnect","scanWifiInterval","componentWillUnmount","onConnectionReady","sudoDialog","sudoDialogPassword","wifiDialog","wifiDialogPassword","scanWifi","firstRequest","item1","item2","mac","type","virtual","interfaceItem","map","dhcp","selectedTab","renderRootDialog","Dialog","onClose","DialogTitle","DialogContent","TextField","onChange","e","target","DialogActions","Button","color","disabled","onClick","startIcon","renderWifiDialog","startsWifiScan","enabled","cb","renderInterface","i","saveEnabled","ipValid","maskValid","gatewayValid","ip4subnet","gateway","Grid","container","item","className","classes","gridItem","FormControlLabel","control","Checkbox","editable","checked","label","input","error","helperText","ip6","ip6subnet","dnsRecord","dnsI","IconButton","title","LinearProgress","Switch","renderWifi","connected","undefined","security","includes","Tooltip","buttonIcon","render","loaded","theme","background","themeType","AppBar","position","Tabs","selectTab","Tab","tabContainer","tabContent","withSnackbar","withStyles","root","padding","overflow","height","display","marginLeft","width","maxWidth","marginBottom","Boolean","themeName","Utils","getThemeName","console","log","version","build","ReactDOM","common","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.946fc675.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles';\r\nimport { withSnackbar } from 'notistack';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    TextField,\r\n    FormControlLabel,\r\n    Grid,\r\n    IconButton,\r\n    Tooltip,\r\n    Switch,\r\n    LinearProgress,\r\n} from '@material-ui/core';\r\n\r\nimport SettingsInputComponentIcon from '@material-ui/icons/SettingsInputComponent';\r\nimport WifiIcon from '@material-ui/icons/Wifi';\r\nimport SignalWifi1BarIcon from '@material-ui/icons/SignalWifi1Bar';\r\nimport SignalWifi1BarLockIcon from '@material-ui/icons/SignalWifi1BarLock';\r\nimport SignalWifi2BarIcon from '@material-ui/icons/SignalWifi2Bar';\r\nimport SignalWifi2BarLockIcon from '@material-ui/icons/SignalWifi2BarLock';\r\nimport SignalWifi3BarIcon from '@material-ui/icons/SignalWifi3Bar';\r\nimport SignalWifi3BarLockIcon from '@material-ui/icons/SignalWifi3BarLock';\r\nimport SignalWifi4BarIcon from '@material-ui/icons/SignalWifi4Bar';\r\nimport SignalWifi4BarLockIcon from '@material-ui/icons/SignalWifi4BarLock';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconCancel from '@material-ui/icons/Cancel';\r\n\r\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\r\nimport Loader from '@iobroker/adapter-react/Components/Loader';\r\nimport I18n from '@iobroker/adapter-react/i18n';\r\n\r\nconst styles = () => ({\r\n    root: {},\r\n    tabContent: {\r\n        padding: 10,\r\n        overflow: 'auto',\r\n        height: 'calc(100% - 64px)',\r\n    },\r\n    tabContainer: {\r\n        display: 'flex',\r\n    },\r\n    buttonIcon: {\r\n        marginLeft: 10,\r\n    },\r\n    gridItem: {\r\n        width: '50%',\r\n        maxWidth: 500,\r\n    },\r\n    input: {\r\n        display: 'block',\r\n        marginBottom: 10,\r\n    },\r\n});\r\n\r\nconst ipValidate = (ip, isMask) => {\r\n    let result;\r\n    const matches = (ip || '').match(/^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)$/);\r\n    if (!matches) {\r\n        result = false;\r\n    } else {\r\n        result = !matches.slice(1).find(el => parseInt(el) < 0 || parseInt(el) > 255);\r\n\r\n        if (isMask && result) {\r\n            result = (0x100000000 + (parseInt(matches[1], 10) << 24) + (parseInt(matches[2], 10) << 16) + (parseInt(matches[3], 10) << 8) + parseInt(matches[4], 10)).toString(2).match(/^1+0+$/);\r\n            if (result && !parseInt(matches[1], 10)) {\r\n                result = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nconst getWiFiIcon = (open, quality) => {\r\n    const style = { marginRight: 8 };\r\n\r\n    if (quality > -67) {\r\n        return open ? <SignalWifi4BarIcon style={style} /> : <SignalWifi4BarLockIcon style={style} />;\r\n    } else if (quality > -70) {\r\n        return open ? <SignalWifi3BarIcon style={style} /> : <SignalWifi3BarLockIcon style={style} />;\r\n    } else if (quality > -80) {\r\n        return open ? <SignalWifi2BarIcon style={style} /> : <SignalWifi2BarLockIcon style={style} />;\r\n    } else {\r\n        return open ? <SignalWifi1BarIcon style={style} /> : <SignalWifi1BarLockIcon style={style} />;\r\n    }\r\n};\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = {};\r\n        extendedProps.translations = {\r\n            en: require('./i18n/en'),\r\n            de: require('./i18n/de'),\r\n            ru: require('./i18n/ru'),\r\n            pt: require('./i18n/pt'),\r\n            nl: require('./i18n/nl'),\r\n            fr: require('./i18n/fr'),\r\n            it: require('./i18n/it'),\r\n            es: require('./i18n/es'),\r\n            pl: require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n        extendedProps.doNotLoadAllObjects = true;\r\n        extendedProps.adapterName = 'network';\r\n\r\n        super(props, extendedProps);\r\n\r\n        this.pendingWifiInterval = null;\r\n        this.scanWifiInterval = null;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.pendingWifiInterval && clearInterval(this.pendingWifiInterval);\r\n        this.pendingWifiInterval = null;\r\n\r\n        this.scanWifiInterval && clearInterval(this.scanWifiInterval);\r\n        this.scanWifiInterval = null;\r\n    }\r\n\r\n    onConnectionReady() {\r\n        this.setState({\r\n            interfaces: null,\r\n            interfacesChanged: [],\r\n            wifi: [],\r\n            dns: [],\r\n            wifiConnections: [],\r\n            sudoDialog: false,\r\n            sudoDialogPassword: '',\r\n            wifiDialog: false,\r\n            wifiDialogPassword: '',\r\n            scanWifi: false,\r\n            processing: false,\r\n            firstRequest: 0,\r\n        }, () => this.refresh());\r\n    }\r\n\r\n    refreshWiFi = () => {\r\n        let wifiConnectionsLocal = null;\r\n        return this.socket.sendTo(`network.${this.instance}`, 'wifiConnections', null)\r\n            .then(wifiConnections => {\r\n                wifiConnectionsLocal = wifiConnections;\r\n                this.setState({ wifiConnections });\r\n                return this.socket.sendTo(`network.${this.instance}`, 'wifi', null);\r\n            })\r\n            .then(wifi => {\r\n                if (wifi.length) {\r\n                    wifi = wifi.filter(wifiNetwork => wifiNetwork.ssid.trim() !== '').sort((a, b) => {\r\n                        const connectedA = !!(wifiConnectionsLocal.length && a.ssid === wifiConnectionsLocal[0].ssid);\r\n                        const connectedB = !!(wifiConnectionsLocal.length && b.ssid === wifiConnectionsLocal[0].ssid);\r\n                        if (connectedA) {\r\n                            return -1;\r\n                        } else if (connectedB) {\r\n                            return 1;\r\n                        } else {\r\n                            return b.quality - a.quality;\r\n                        }\r\n                    });\r\n                    this.setState({ wifi });\r\n                }\r\n            });\r\n    }\r\n\r\n    refresh() {\r\n        if (this.state.firstRequest === 0) {\r\n            this.setState({ firstRequest: 1 });\r\n        }\r\n        return this.socket.sendTo(`network.${this.instance}`, 'interfaces', null)\r\n            .then(interfaces => {\r\n                interfaces.sort((item1, item2) => (item1.mac > item2.mac ? -1 : 1));\r\n                interfaces.sort((item1, item2) => (item1.type === 'wired' ? -1 : 1));\r\n                interfaces.sort((item1, item2) => (!item1.virtual ? -1 : 1));\r\n                interfaces = interfaces.filter(interfaceItem => interfaceItem.ip4 !== '127.0.0.1');\r\n                interfaces = interfaces.map(interfaceItem => {\r\n                    if (typeof interfaceItem.dhcp === 'string') {\r\n                        interfaceItem.dhcp = JSON.parse(interfaceItem.dhcp);\r\n                    }\r\n\r\n                    return interfaceItem;\r\n                });\r\n\r\n                this.setState({ interfaces, interfacesChanged: JSON.parse(JSON.stringify(interfaces)) });\r\n\r\n                return this.refreshWiFi();\r\n            })\r\n            .then(() => this.socket.sendTo(`network.${this.instance}`, 'dns', null))\r\n            .then(dns => this.setState({ dns, firstRequest: 2 }));\r\n    }\r\n\r\n    setInterfaceParam = (index, param, value) => {\r\n        const interfacesChanged = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfacesChanged[index][param] = value;\r\n        this.setState({ interfacesChanged });\r\n    }\r\n\r\n    setDns = (interfaceIndex, dnsIndex, value) => {\r\n        const interfacesChanged = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfacesChanged[interfaceIndex].dns[dnsIndex] = value;\r\n        this.setState({ interfacesChanged });\r\n    }\r\n\r\n    addDns = interfaceIndex => {\r\n        const interfacesChanged = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfacesChanged[interfaceIndex].dns.push('');\r\n        this.setState({ interfacesChanged });\r\n    }\r\n\r\n    removeDns = (interfaceIndex, dnsIndex) => {\r\n        const interfacesChanged = JSON.parse(JSON.stringify(this.state.interfacesChanged));\r\n        interfacesChanged[interfaceIndex].dns.splice(dnsIndex, 1);\r\n        this.setState({ interfacesChanged });\r\n    }\r\n\r\n    getSelectedTab() {\r\n        return this.state.selectedTab ? this.state.selectedTab : '0';\r\n    }\r\n\r\n    sendData = (index, password) => {\r\n        this.setState({ processing: true });\r\n        this.socket.sendTo(`network.${this.instance}`, 'changeInterface', {\r\n            rootPassword: password,\r\n            data: this.state.interfacesChanged[index],\r\n        })\r\n            .then(result => {\r\n                this.setState({ processing: false });\r\n                if (result) {\r\n                    this.props.enqueueSnackbar(I18n.t('Interface updated'), { variant: 'success' });\r\n                    this.refresh();\r\n                } else {\r\n                    this.props.enqueueSnackbar(I18n.t('Interface not updated'), { variant: 'error' });\r\n                }\r\n            });\r\n\r\n        if (window.location.hostname === this.state.interfaces[index].ip4 && this.state.interfacesChanged[index].ip4 !== this.state.interfaces[index].ip4) {\r\n            window.location.href = `http://${this.state.interfacesChanged[index].ip4}:${window.location.port}`;\r\n        }\r\n    }\r\n\r\n    connect = (ssid, password) => {\r\n        this.setState({ processing: true });\r\n        return this.socket.sendTo(`network.${this.instance}`, 'wifiConnect', { ssid, password, iface: this.state.interfacesChanged[this.getSelectedTab()].iface })\r\n            .then(() => {\r\n                this.refreshWiFi();\r\n                const startTime = Date.now();\r\n\r\n                this.pendingWifiInterval = setInterval(() => {\r\n                    if (this.state.wifiConnections.length && ssid === this.state.wifiConnections[0].ssid) {\r\n                        this.props.enqueueSnackbar(`${ssid} ${I18n.t('connected')}`, { variant: 'success' });\r\n                        clearInterval(this.pendingWifiInterval);\r\n                        this.pendingWifiInterval = null;\r\n                        this.refresh()\r\n                            .then(() => this.setState({ processing: false }));\r\n                    } else if (Date.now() - startTime > 40 * 1000) {\r\n                        this.props.enqueueSnackbar(`${ssid} ${I18n.t('not connected')}`, { variant: 'error' });\r\n                        clearInterval(this.pendingWifiInterval);\r\n                        this.pendingWifiInterval = null;\r\n                        this.refresh()\r\n                            .then(() => this.setState({ processing: false }));\r\n                    } else {\r\n                        this.refreshWiFi();\r\n                    }\r\n                }, 1000);\r\n            });\r\n    }\r\n\r\n    disconnect = () => {\r\n        this.setState({ processing: true });\r\n        return this.socket.sendTo(`network.${this.instance}`, 'wifiDisconnect', { iface: this.state.interfacesChanged[this.getSelectedTab()].iface })\r\n            .then(() => {\r\n                this.refreshWiFi();\r\n                const startTime = Date.now();\r\n                this.pendingWifiInterval = setInterval(() => {\r\n                    if (this.state.wifiConnections.length === 0) {\r\n                        this.props.enqueueSnackbar(I18n.t('Wi-fi disconnected'), { variant: 'success' });\r\n                        clearInterval(this.pendingWifiInterval);\r\n                        this.pendingWifiInterval = null;\r\n                        this.refresh()\r\n                            .then(() => this.setState({ processing: false }));\r\n                    } else if (Date.now() - startTime > 40 * 1000) {\r\n                        this.props.enqueueSnackbar(I18n.t('Wi-fi disconnected'), { variant: 'error' });\r\n                        clearInterval(this.pendingWifiInterval);\r\n                        this.pendingWifiInterval = null;\r\n                        this.refresh()\r\n                            .then(() => this.setState({ processing: false }));\r\n                    } else {\r\n                        this.refreshWiFi();\r\n                    }\r\n                }, 1000);\r\n            });\r\n    }\r\n\r\n    renderRootDialog() {\r\n        return <Dialog\r\n            open={this.state.sudoDialog !== false}\r\n            onClose={() => this.setState({\r\n                sudoDialog: false,\r\n                sudoDialogPassword: '',\r\n            })}\r\n        >\r\n            <DialogTitle>{I18n.t('Enter sudo password')}</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    value={this.state.sudoDialogPassword}\r\n                    onChange={e => this.setState({ sudoDialogPassword: e.target.value })}\r\n                    type=\"password\"\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={!this.state.sudoDialogPassword}\r\n                    onClick={() => {\r\n                        this.sendData(this.state.sudoDialog, this.state.sudoDialogPassword);\r\n                        this.setState({\r\n                            sudoDialog: false,\r\n                            sudoDialogPassword: '',\r\n                        });\r\n                    }}\r\n                >\r\n                    {I18n.t('Send')}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => this.setState({\r\n                        sudoDialog: false,\r\n                        sudoDialogPassword: '',\r\n                    })}\r\n                    startIcon={<IconCancel />}\r\n                >\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    renderWifiDialog() {\r\n        return <Dialog\r\n            open={this.state.wifiDialog !== false}\r\n            onClose={() => this.setState({\r\n                wifiDialog: false,\r\n                wifiDialogPassword: '',\r\n            })}\r\n        >\r\n            <DialogTitle>{I18n.t('Enter wifi password')}</DialogTitle>\r\n            <DialogContent>\r\n                <TextField\r\n                    value={this.state.wifiDialogPassword}\r\n                    onChange={e => this.setState({ wifiDialogPassword: e.target.value })}\r\n                    type=\"password\"\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => this.setState({\r\n                        wifiDialog: false,\r\n                        wifiDialogPassword: '',\r\n                    })}\r\n                >\r\n                    {I18n.t('Cancel')}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled={!this.state.wifiDialogPassword}\r\n                    onClick={() => {\r\n                        this.connect(this.state.wifiDialog, this.state.wifiDialogPassword);\r\n                        this.setState({\r\n                            wifiDialog: false,\r\n                            wifiDialogPassword: '',\r\n                        });\r\n                    }}\r\n                >\r\n                    {I18n.t('Send')}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    startsWifiScan(enabled, cb) {\r\n        if (enabled === true) {\r\n            this.scanWifiInterval = this.scanWifiInterval || setInterval(this.refreshWiFi, 4000);\r\n            this.setState({ scanWifi: true }, () => cb && cb());\r\n        } else if (enabled === false) {\r\n            this.scanWifiInterval && clearInterval(this.scanWifiInterval);\r\n            this.scanWifiInterval = null;\r\n            this.setState({ scanWifi: false }, () => cb && cb());\r\n        } else {\r\n            this.startsWifiScan(!this.state.scanWifi, cb);\r\n        }\r\n    }\r\n\r\n    renderInterface(interfaceItem, i) {\r\n        let saveEnabled;\r\n        let ipValid = true;\r\n        let maskValid = true;\r\n        let gatewayValid = true;\r\n\r\n        if (!interfaceItem.dhcp) {\r\n            ipValid = ipValidate(interfaceItem.ip4);\r\n            maskValid = ipValidate(interfaceItem.ip4subnet, true);\r\n            gatewayValid = ipValidate(interfaceItem.gateway);\r\n\r\n            saveEnabled = ipValid && maskValid && gatewayValid;\r\n            if (saveEnabled) {\r\n                if (interfaceItem.dhcp !== this.state.interfaces[i].dhcp) {\r\n                    saveEnabled = true;\r\n                } else {\r\n                    saveEnabled = interfaceItem.ip4 !== this.state.interfaces[i].ip4 ||\r\n                        interfaceItem.ip4subnet !== this.state.interfaces[i].ip4subnet ||\r\n                        interfaceItem.gateway !== this.state.interfaces[i].gateway;\r\n                }\r\n            }\r\n        } else {\r\n            saveEnabled = interfaceItem.dhcp !== this.state.interfaces[i].dhcp;\r\n        }\r\n\r\n        return <>\r\n            <Grid container>\r\n                <Grid item className={this.props.classes.gridItem}>\r\n                    <FormControlLabel\r\n                        control={<Checkbox\r\n                            disabled={this.state.processing || !interfaceItem.editable}\r\n                            checked={interfaceItem.dhcp}\r\n                            onChange={e => {\r\n                                if (e.target.checked) {\r\n                                    this.setInterfaceParam(i, 'ip4', this.state.interfaces[i].ip4);\r\n                                    this.setInterfaceParam(i, 'ip4subnet', this.state.interfaces[i].ip4subnet);\r\n                                    this.setInterfaceParam(i, 'gateway', this.state.interfaces[i].gateway);\r\n                                }\r\n                                this.setInterfaceParam(i, 'dhcp', e.target.checked);\r\n                            }}\r\n                        />}\r\n                        label={I18n.t('DHCP')}\r\n                    />\r\n                    <>\r\n                        <h4>IPv4</h4>\r\n                        <TextField\r\n                            className={this.props.classes.input}\r\n                            value={interfaceItem.ip4}\r\n                            error={!ipValid}\r\n                            label={I18n.t('IPv4')}\r\n                            onChange={e => this.setInterfaceParam(i, 'ip4', e.target.value)}\r\n                            disabled={interfaceItem.dhcp || !interfaceItem.editable}\r\n                            helperText={!ipValid ? I18n.t('Invalid IP address') : ''}\r\n                        />\r\n                        <TextField\r\n                            className={this.props.classes.input}\r\n                            value={interfaceItem.ip4subnet}\r\n                            error={!maskValid}\r\n                            label={I18n.t('IPv4 netmask')}\r\n                            onChange={e => this.setInterfaceParam(i, 'ip4subnet', e.target.value)}\r\n                            disabled={interfaceItem.dhcp || !interfaceItem.editable}\r\n                            helperText={!maskValid ? I18n.t('Invalid netmask') : ''}\r\n                        />\r\n                        <TextField\r\n                            className={this.props.classes.input}\r\n                            value={interfaceItem.gateway}\r\n                            error={!gatewayValid}\r\n                            label={I18n.t('Default gateway')}\r\n                            onChange={e => this.setInterfaceParam(i, 'gateway', e.target.value)}\r\n                            disabled={interfaceItem.dhcp || !interfaceItem.editable}\r\n                            helperText={!gatewayValid ? I18n.t('Invalid default gateway') : ''}\r\n                        />\r\n                        <h4>IPv6</h4>\r\n                        <TextField\r\n                            className={this.props.classes.input}\r\n                            value={interfaceItem.ip6}\r\n                            label={I18n.t('IPv6')}\r\n                            disabled\r\n                        />\r\n                        <TextField\r\n                            value={interfaceItem.ip6subnet}\r\n                            label={I18n.t('IPv6 netmask')}\r\n                            disabled\r\n                        />\r\n                        <h4>DNS</h4>\r\n                    </>\r\n                    {\r\n                        interfaceItem.dns && interfaceItem.dns.map((dnsRecord, dnsI) => <div key={dnsI}>\r\n                            <TextField\r\n                                value={dnsRecord}\r\n                                label={I18n.t('DNS record')}\r\n                                onChange={e => this.setDns(i, dnsI, e.target.value)}\r\n                                disabled={interfaceItem.dhcp || !interfaceItem.editable}\r\n                            />\r\n                            {interfaceItem.editable && !interfaceItem.dhcp && interfaceItem.dns && interfaceItem.dns.length > 1 ? <IconButton onClick={() => this.removeDns(i, dnsI)}>\r\n                                <DeleteIcon />\r\n                            </IconButton> : null}\r\n                        </div>)\r\n                    }\r\n                    {\r\n                        interfaceItem.editable && !interfaceItem.dhcp ?\r\n                            <IconButton onClick={() => this.addDns(i)} title={I18n.t('Add DNS record')}>\r\n                                <AddIcon />\r\n                            </IconButton>\r\n                            : null\r\n                    }\r\n                    { interfaceItem.editable && !interfaceItem.dhcp ? <br /> : null }\r\n                    {interfaceItem.editable ?\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={!saveEnabled || this.state.processing}\r\n                            onClick={() => this.sendData(i, '')}\r\n                        >\r\n                            {I18n.t('Save')}\r\n                        </Button> : null\r\n                    }\r\n                </Grid>\r\n                {interfaceItem.type === 'wired'\r\n                    ? null\r\n                    : <Grid item className={this.props.classes.gridItem}>\r\n                        {this.state.processing || this.state.firstRequest < 2 ? <LinearProgress /> : null}\r\n                        <FormControlLabel\r\n                            control={<Switch\r\n                                disabled={this.state.processing}\r\n                                checked={this.state.scanWifi}\r\n                                onChange={() => this.startsWifiScan()}\r\n                            />}\r\n                            label={I18n.t('Wifi scan')}\r\n                        />\r\n                        {this.renderWifi()}\r\n                    </Grid>}\r\n            </Grid>\r\n            {/*<pre>\r\n                 {interfaceItem.type === 'wireless'\r\n                    ? JSON.stringify(this.state.wifi, null, 2) + JSON.stringify(this.state.wifiConnections, null, 2)\r\n                    : null}\r\n                 {JSON.stringify(interfaceItem, null, 2)}\r\n            </pre>*/}\r\n        </>;\r\n    }\r\n\r\n    renderWifi() {\r\n        return this.state.wifi.map((wifi, i) => {\r\n            const connected = !!(this.state.wifiConnections.length && wifi.ssid === this.state.wifiConnections[0].ssid);\r\n            return <div key={i}>\r\n                <Button\r\n                    variant={connected ? 'contained' : undefined}\r\n                    color={connected ? 'primary' : undefined}\r\n                    disabled={connected || this.state.processing}\r\n                    title={connected ? '' : I18n.t('Click to connect')}\r\n                    onClick={() => this.startsWifiScan(false, () => {\r\n                        if (wifi.security.includes('Open')) {\r\n                            this.connect(wifi.ssid, '');\r\n                        } else {\r\n                            this.setState({ wifiDialog: wifi.ssid });\r\n                        }\r\n                    })}\r\n                >\r\n                    <Tooltip title={wifi.quality + ' dBm'}>\r\n                        {getWiFiIcon(wifi.security.includes('Open'), parseInt(wifi.quality))}\r\n                    </Tooltip>\r\n                    {wifi.ssid}\r\n                </Button>\r\n                {connected\r\n                    ? <Button\r\n                        onClick={() => {\r\n                            this.startsWifiScan(false, () =>\r\n                                this.disconnect());\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        className={this.props.classes.buttonIcon}\r\n                        disabled={this.state.processing}\r\n                    >\r\n                        {I18n.t('Disconnect')}\r\n                    </Button>\r\n                    : null}\r\n            </div>;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <Loader theme={this.state.themeType} />\r\n            </MuiThemeProvider>;\r\n        }\r\n        if (!this.state.interfaces) {\r\n            return <MuiThemeProvider theme={this.state.theme}>\r\n                <LinearProgress />\r\n            </MuiThemeProvider>;\r\n        }\r\n\r\n        return <MuiThemeProvider theme={this.state.theme}>\r\n            <div className=\"App\" style={{ background: this.state.themeType === 'dark' ? '#000' : '#FFF', color: this.state.themeType === 'dark' ? '#EEE' : '#111' }}>\r\n                <AppBar position=\"static\">\r\n                    <Tabs\r\n                        value={this.getSelectedTab()}\r\n                        onChange={(e, index) => this.selectTab(index, index)}\r\n                        variant=\"scrollable\"\r\n                    >\r\n                        {this.state.interfaces.map((interfaceItem, i) => <Tab\r\n                            value={i.toString()}\r\n                            key={i}\r\n                            label={<div className={this.props.classes.tabContainer}>\r\n                                {interfaceItem.type === 'wired' ? <SettingsInputComponentIcon className={this.props.classes.buttonIcon} /> : <WifiIcon className={this.props.classes.buttonIcon} />}\r\n                                {interfaceItem.iface}\r\n                            </div>}\r\n                        />)}\r\n                    </Tabs>\r\n                    {!this.state.interfaces.length ? I18n.t('No network interfaces detected!') : null}\r\n                </AppBar>\r\n\r\n                <div className={this.props.classes.tabContent}>\r\n                    {this.renderInterface(this.state.interfacesChanged[this.getSelectedTab()], this.getSelectedTab())}\r\n                </div>\r\n\r\n                {this.renderRootDialog()}\r\n                {this.renderWifiDialog()}\r\n            </div>\r\n        </MuiThemeProvider>;\r\n    }\r\n}\r\n\r\nexport default withSnackbar(withStyles(styles)(App));\r\n","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker === null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404\r\n        || (contentType !== null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as Sentry from '@sentry/browser';\r\nimport * as SentryIntegrations from '@sentry/integrations';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { SnackbarProvider } from 'notistack';\r\nimport './index.css';\r\nimport theme from '@iobroker/adapter-react/Theme';\r\nimport Utils from '@iobroker/adapter-react/Components/Utils';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { version } from '../package.json';\r\n\r\nwindow.adapterName = 'network';\r\nlet themeName = Utils.getThemeName();\r\n\r\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\r\n\r\nfunction build() {\r\n    return ReactDOM.render(\r\n        <MuiThemeProvider theme={theme(themeName)}>\r\n            <SnackbarProvider>\r\n                <App\r\n                    common={{}}\r\n                    onThemeChange={_theme => {\r\n                        themeName = _theme;\r\n                        build();\r\n                    }}\r\n                />\r\n            </SnackbarProvider>\r\n        </MuiThemeProvider>,\r\n        document.getElementById('root'),\r\n    );\r\n}\r\n\r\nbuild();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}